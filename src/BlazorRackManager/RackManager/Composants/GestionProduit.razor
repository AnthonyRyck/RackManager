@inject IGestionProduitViewModel ViewModel

<h3>Gestion des Produits</h3>

@if (ViewModel.IsLoaded)
{
	<div>
		<div class="padding-10">
			@if (!ViewModel.CanOpenNewProduit)
			{
				<RadzenButton Text="Nouveau Produit"
							  Icon="add_circle"
							  ButtonStyle="ButtonStyle.Secondary"
							  Click="ViewModel.OpenNewProduit" />
			}
			else
			{
				<div class="col-xl-6">
					
					<EditForm OnValidSubmit="@ViewModel.OnValidSubmitProduit"
							  Model="@ViewModel.NouveauProduit">
						<RadzenCard>

							<DataAnnotationsValidator />
							<div class="row">
								<div class="col">
									<div class="margin-5px">
										<div>
											<ValidationMessage For="@(() => ViewModel.NouveauProduit.Reference)" />
										</div>
										<RadzenTextBox Placeholder="Référence..."
													   @bind-Value="ViewModel.NouveauProduit.Reference"
													   Style="width 300px" />
									</div>

									<div class="margin-5px">
										<div>
											<ValidationMessage For="@(() => ViewModel.NouveauProduit.NomProduit)" />
										</div>
										<RadzenTextBox Placeholder="Nom..."
													   @bind-Value="ViewModel.NouveauProduit.NomProduit"
													   Style="width 300px" />
									</div>

									<div class="margin-5px">
										<div>
											<ValidationMessage For="@(() => ViewModel.NouveauProduit.IdMesure)" />
										</div>
										<select name="selectMesure"
												@onchange="@(e =>  ViewModel.OnChangeMesure(e))">

											<option value="noid"></option>

											@foreach (var mesure in ViewModel.Mesures)
											{
											<option value="@mesure.IdMesure">@mesure.Unite</option>
											}
										</select>
									</div>

									<div class="margin-5px">
										<MatFileUpload OnChange="@ViewModel.UploadFiles"
													   title="Ajouter une image du produit"
													   Label="Image du produit" />
									</div>
								</div>

								@if(ViewModel.HaveImage)
								{
								<div class="col">
									<img src="@ViewModel.ImageEnString" style="height:200px;width:200px;" />
								</div>
								}

							</div>
						</RadzenCard>

						<span class="margin-10px">
							<button type="submit" class="padding-5">Ajouter</button>

							<button type="reset"
									class="padding-5"
									@onclick="ViewModel.CloseNewProduit">
								Terminer
							</button>
						</span>
					</EditForm>
				</div>
			}
		</div>
	</div>

	<div>
		<RadzenDataList WrapItems="true" 
						AllowPaging="true" 
						Data="@ViewModel.Produits" 
						TItem="ProduitView">
			<Template Context="produit">
				<div class="rackcard grow-rack"
						@onclick="(() => ViewModel.OpenProduitPage(produit.IdReference))">
					<div>
						<div>Référence :  <b>@produit.IdReference</b></div>
						<div>Nom : <b>@produit.Nom</b></div>
						<div>Unité de mesure : <b>@produit.UniteMesure</b></div>
						@if(!string.IsNullOrEmpty(produit.Base64String))
						{
							<img src="@produit.Base64String"
								 Style="width: 100px; height: 100px; border: 2px solid black" />
						}						
						else
						{
							<img src="/Images/No_image_available_400_x_600.svg.png"
								 Style="width:100px;height:100px;border:2px solid black" />
						}
					</div>
				</div>
			</Template>
		</RadzenDataList>
	</div>
}
else
{
	<div>Chargement des produits...</div>
}

@code {
	protected override async Task OnInitializedAsync()
	{
		await ViewModel.LoadProduits();
	}
}
