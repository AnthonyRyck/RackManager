<div>
	<EditForm OnValidSubmit="@OnValidTransfert"
			  Model="@TransfertRackValidation">
		<RadzenCard>
			@* Super IMPORTANT !!! *@
			<DataAnnotationsValidator />

			<div class="row">

				<div class="col-xl-3">

					<span>Déplacer une palette d'un rack, vers un rack vide.</span>

					<div>
						<ValidationMessage For="@(() => TransfertRackValidation.GisementRackPartant)" />
					</div>
					<RadzenDropDown AllowClear="true"
									TValue="string"
									FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
									FilterOperator="StringFilterOperator.StartsWith"
									AllowFiltering="true"
									Data=@RackFull
									TextProperty="GisementPos"
									ValueProperty="GisementPos"
									Placeholder="Choisir un Gisement occupé"
									@bind-Value="TransfertRackValidation.GisementRackPartant"
									SelectedItemChanged=@OnSelectedRackPartant />

					<div class="margin-5px">
						<div>
							<ValidationMessage For="@(() => TransfertRackValidation.GisementRackArrivant)" />
						</div>
						<RadzenDropDown AllowClear="true"
										TValue="string"
										FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
										FilterOperator="StringFilterOperator.StartsWith"
										AllowFiltering="true"
										Data=@RackEmpty
										TextProperty="GisementPos"
										ValueProperty="GisementPos"
										Placeholder="Choisir un Gisement vide"
										@bind-Value="TransfertRackValidation.GisementRackArrivant"
										SelectedItemChanged=@OnSelectedRackArrivant />
					</div>
				</div>

				<div class="col-xl-3">
					@if (TransfertRackValidation.IdRackPartant != 0)
					{
						<div>
							Palette sélectionnée :
						</div>
						<div>
							<div>
								<span><u>Client</u> : @ClientTransfert.NomClient</span>
							</div>
							<div>
								<span><u>Commande</u> : @ClientTransfert.IdCommande</span>
							</div>
							<div>
								<span><u>Info</u> : @ClientTransfert.DescriptionCmd</span>
							</div>
						</div>
					}
				</div>
			</div>

			<span class="margin-10px">
				<button type="submit" class="padding-5">Transférer</button>

				<button type="reset"
						class="padding-5"
						@onclick="CloseTransfert">
					Terminer
				</button>
			</span>
		</RadzenCard>
	</EditForm>
</div>

@code {

	[Parameter]
	public EventCallback OnValidTransfert { get; set; }

	[Parameter]
	public TransfertRackValidation TransfertRackValidation { get; set; }

	[Parameter]
	public IEnumerable<Rack> RackFull { get; set; }

	[Parameter]
	public IEnumerable<Rack> RackEmpty { get; set; }

	[Parameter]
	public EventCallback CloseTransfert { get; set; }

	[Parameter]
	public CommandeView ClientTransfert { get; set; }

	[Parameter]
	public EventCallback<Rack> SelectRackArrivant { get; set; }

	[Parameter]
	public EventCallback<Rack> SelectRackPartant { get; set; }


	private async void OnSelectedRackArrivant(object rack)
	{
		var rackSelected = rack as Rack;
		if (rackSelected != null)
		{
			await SelectRackArrivant.InvokeAsync(rackSelected);
		}
	}

	private async void OnSelectedRackPartant(object rack)
	{
		var rackSelected = rack as Rack;
		if (rackSelected != null)
		{
			await SelectRackPartant.InvokeAsync(rackSelected);
		}
	}
}
