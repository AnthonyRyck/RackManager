<div class="col-xl-3">
	<EditForm OnValidSubmit="@OnValidSubmit"
			  Model="@EntreHangarValidation">
		<RadzenCard>
			@* Super IMPORTANT !!! *@
			<DataAnnotationsValidator />

			<h4>Ajouter une entrée</h4>

			@*Choisir un gisement*@
			<div class="margin-5px">
				<div>
					<ValidationMessage For="@(() => EntreHangarValidation.GisementRack)" />
				</div>

			<SelectRack Racks="@Racks"
						Gisement="@EntreHangarValidation.GisementRack"
						OnSelectedRack="@OnSelectedRack"
						GisementSelected="@EntreHangarValidation.GisementRack" />
			</div>

			@*Choix du client*@
			<div class="margin-5px">
				<div>
					<ValidationMessage For="@(() => EntreHangarValidation.IdCommande)" />
				</div>
				<RadzenNumeric ShowUpDown="false"
							   TValue="int?"
							   @bind-Value=@EntreHangarValidation.IdCommande
							   Placeholder="Numéro de commande"
							   Style="width 300px" />
			</div>

			<div class="margin-5px">
				<RadzenTextBox @bind-Value=@EntreHangarValidation.Description
							   Placeholder="Description (optionnelle)"
							   Style="width 300px" />
				<div style="font-size:small"><u>Note</u> : si commande déjà en base de données, la description ne sera pas prise en compte.</div>
			</div>

			<div class="margin-5px">
				<div>
					<ValidationMessage For="@(() => EntreHangarValidation.NomClient)" />
				</div>

				<RadzenDropDown AllowClear="true"
								TValue="string"
								FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
								FilterOperator="StringFilterOperator.StartsWith"
								AllowFiltering="true"
								Data=@AllClients
								TextProperty="NomClient"
								ValueProperty="NomClient"
								Placeholder="Choisir un client"
								@bind-Value="EntreHangarValidation.NomClient"
								SelectedItemChanged="OnActionSelectClient" />
			</div>

			@*Date d'entrée*@
			<div class="margin-5px">
				<div>
					<ValidationMessage For="@(() => EntreHangarValidation.DateEntree)" />
				</div>
				<RadzenDatePicker @bind-Value=@EntreHangarValidation.DateEntree
								  DateFormat="d" />
			</div>
		</RadzenCard>


		<span class="margin-10px">
			<button type="submit" class="padding-5">Ajouter</button>

			<button type="reset"
					class="padding-5"
					@onclick="OnTerminerClick">
				Terminer
			</button>
		</span>
	</EditForm>
</div>

@code {

	[Parameter]
	public EntreHangarValidation EntreHangarValidation { get; set; }

	[Parameter]
	public IEnumerable<Client> AllClients { get; set; }

	[Parameter]
	public IEnumerable<Rack> Racks { get; set; }

	[Parameter]
	public EventCallback OnTerminerClick { get; set; }

	[Parameter]
	public EventCallback<Client> OnSelectClient { get; set; }

	[Parameter]
	public EventCallback<string> OnSelectedRack { get; set; }

	[Parameter]
	public EventCallback OnValidSubmit { get; set; }


	//private void OnActionSelectRack(object rack)
	//{
	//	var rackSelected = rack as Rack;
	//	if (rackSelected != null)
	//	{
	//		OnSelectedRack.InvokeAsync(rackSelected);
	//	}
	//}


	private void OnActionSelectClient(object client)
	{
		Client clientSelected = client as Client;

		if (clientSelected != null)
		{
			OnSelectClient.InvokeAsync(clientSelected);
		}
	}
}
