<EditForm OnValidSubmit="@OnValidSubmitProduit"
		  Model="@ProduitNouveau">
	<RadzenCard>

		<DataAnnotationsValidator />
		<div class="row">
			<div class="col">
				<div class="margin-5px">
					<div>
						<ValidationMessage For="@(() => ProduitNouveau.Reference)" />
					</div>
					<RadzenTextBox Placeholder="Référence..."
								   @bind-Value="ProduitNouveau.Reference"
								   Style="width 300px" />
				</div>

				<div class="margin-5px">
					<div>
						<ValidationMessage For="@(() => ProduitNouveau.NomProduit)" />
					</div>
					<RadzenTextBox Placeholder="Nom..."
								   @bind-Value="ProduitNouveau.NomProduit"
								   Style="width 300px" />
				</div>

				<div class="margin-5px">
					<div>
						<ValidationMessage For="@(() => ProduitNouveau.IdMesure)" />
					</div>
					<select name="selectMesure"
							@onchange="@OnChangeMesure">

						<option value="noid"></option>

						@foreach (var mesure in Mesures)
						{
							<option value="@mesure.IdMesure">@mesure.Unite</option>
						}
					</select>
				</div>

				<div class="margin-5px">
					<MatFileUpload OnChange="@UploadFiles"
								   title="Ajouter une image du produit"
								   Label="Image du produit" />

				</div>
			</div>

			@if (HaveImage)
			{
				<div class="col">
					<img src="@ImageEnString" style="height:200px;width:200px;" />
				</div>
			}

		</div>
	</RadzenCard>

	<span class="margin-10px">
		<button type="submit" class="padding-5">Ajouter</button>

		<button type="reset"
				class="padding-5"
				@onclick="CloseNewProduit">
			Terminer
		</button>
	</span>
</EditForm>

@code {

	[Parameter]
	public ProduitValidation ProduitNouveau { get; set; }

	[Parameter]
	public EventCallback OnValidSubmitProduit { get; set; }

	[Parameter]
	public EventCallback CloseNewProduit { get; set; }

	[Parameter]
	public bool HaveImage { get; set; }

	[Parameter]
	public string ImageEnString { get; set; }

	[Parameter]
	public IEnumerable<UniteMesure> Mesures { get; set; }

	[Parameter]
	public EventCallback UploadFiles { get; set; }

	[Parameter]
	public EventCallback<ChangeEventArgs> OnChangeMesure { get; set; }
}
