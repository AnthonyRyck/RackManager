@page "/stock"
@attribute [Authorize(Roles = "Admin, Manager, Member")]
@inject IStockViewModel ViewModel


<h3>Stock</h3>

@if (ViewModel.IsLoaded)
{
	<div>
		<div class="padding-10">
			<RadzenButton Text="Nouvelle entrée"
						  Icon="add_circle"
						  ButtonStyle="ButtonStyle.Secondary"
						  Click="ViewModel.OpenNouvelleEntre" />

			@if (ViewModel.DisplayRenderFragment != null)
			{
				<div class="margin-5px">
					@ViewModel.DisplayRenderFragment
				</div>
			}
		</div>
	</div>

	<div>
		<RadzenGrid AllowFiltering="true"
					FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
					AllowPaging="true"
					PageSize="30"
					AllowSorting="true"
					Data="@ViewModel.AllStock"
					TItem="StockView"
					EmptyText="Aucun stock"
					RowUpdate="@ViewModel.OnUpdateRow"
					@ref="ViewModel.StockGrid">
			<Columns>

				@*Colonne pour faire une sortie, une modification de la colonne quantité*@
				<RadzenGridColumn TItem="StockView"
								  Title="Actions"
								  Width="100px"
								  Sortable="false"
								  Filterable="false">
					<Template Context="data">
						<RadzenButton Size="ButtonSize.Small"
									  Click="@(args => ViewModel.EditRow(data, true))"
									  Disabled="ViewModel.RowOnUpdate">Ajouter</RadzenButton>

						<RadzenButton Size="ButtonSize.Small"
									  Click="@(args => ViewModel.EditRow(data, false))"
									  Disabled="ViewModel.RowOnUpdate">Sortir</RadzenButton>
					</Template>

					<EditTemplate Context="data">
						<RadzenButton Icon="save" 
										Size="ButtonSize.Small"
									  Click="@((args) => ViewModel.SaveRow(data))" />

						<RadzenButton Icon="cancel" 
										Size="ButtonSize.Small"
									  ButtonStyle="ButtonStyle.Secondary"
									  Click="@((args) => ViewModel.CancelEdit(data))" />
					</EditTemplate>
				</RadzenGridColumn>

				<RadzenGridColumn TItem="StockView"
								  Property="GisementPos"
								  Title="Gisement"
								  Width="150px" />

				<RadzenGridColumn TItem="StockView"
								  Property="ReferenceProduit"
								  Title="Référence"
								  Width="150px" />

				<RadzenGridColumn TItem="StockView"
								  Property="NomDuProduit"
								  Title="Intitulé"
								  Width="150px" />

				<RadzenGridColumn TItem="StockView"
								  Property="Quantite"
								  Title="Quantite"
								  Sortable="false"
								  Filterable="false"
								  Width="80px">
					<EditTemplate Context="data">
						<RadzenNumeric @bind-Value="data.Quantite" 
										Style="width:100%"
										TValue="double"
										Min="@ViewModel.MinQuantite"
										Max="@ViewModel.MaxQuantite"/>
					</EditTemplate>
				</RadzenGridColumn>

				<RadzenGridColumn TItem="StockView"
								  Property="Unite"
								  Title="Unité"
								  Filterable="false"
								  Sortable="false"
								  Width="150px">
				</RadzenGridColumn>
			</Columns>
		</RadzenGrid>
	</div>
}
else
{
	<div>Chargement des stocks en cours ...</div>
}

@code {
	protected override async Task OnInitializedAsync()
	{
		ViewModel.SetStateHasChanged(StateHasChanged);
		await ViewModel.LoadStocks();
	}
}
