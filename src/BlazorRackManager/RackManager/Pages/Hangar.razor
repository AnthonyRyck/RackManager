@page "/hangar"
@inject IHangarViewModel ViewModel

<h1>Hangar</h1>

@if (ViewModel.IsLoaded)
{
	<div>
		<div class="padding-10">
			<RadzenButton Text="Nouvelle entrée"
						  Icon="add_circle"
						  ButtonStyle="ButtonStyle.Secondary"
						  Click="ViewModel.OpenNouvelleEntre" />

			<RadzenButton Text="Sortie"
						  Icon="all_out"
						  ButtonStyle="ButtonStyle.Secondary"
						  Click="ViewModel.OpenSortie" />

			<RadzenButton Text="Déplacer"
						  Icon="input"
						  ButtonStyle="ButtonStyle.Secondary"
						  Click="ViewModel.OpenTransfert" />

			@if (ViewModel.DisplayRenderFragment != null)
			{
				@ViewModel.DisplayRenderFragment
			}

			@if (ViewModel.DeplacerPalette)
			{
				<div>
					<EditForm OnValidSubmit="@ViewModel.OnValidTransfert"
							  Model="@ViewModel.TransfertRackValidation">
						<RadzenCard>
							<div class="row">

								<div class="col-xl-3">

									<span>Déplacer une palettre vers un rack vide.</span>

									<div>
										<ValidationMessage For="@(() => ViewModel.TransfertRackValidation.GisementRackPartant)" />
									</div>
									<RadzenDropDown AllowClear="true"
													TValue="string"
													FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
													FilterOperator="StringFilterOperator.StartsWith"
													AllowFiltering="true"
													Data=@ViewModel.RacksFull
													TextProperty="GisementPos"
													ValueProperty="GisementPos"
													Placeholder="Choisir un Gisement occupé"
													@bind-Value="ViewModel.TransfertRackValidation.GisementRackPartant"
													SelectedItemChanged=@(args => ViewModel.OnSelectedRackPartant(args)) />

									<div class="margin-5px">
										<div>
											<ValidationMessage For="@(() => ViewModel.TransfertRackValidation.GisementRackArrivant)" />
										</div>
										<RadzenDropDown AllowClear="true"
														TValue="string"
														FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
														FilterOperator="StringFilterOperator.StartsWith"
														AllowFiltering="true"
														Data=@ViewModel.Racks
														TextProperty="GisementPos"
														ValueProperty="GisementPos"
														Placeholder="Choisir un Gisement vide"
														@bind-Value="ViewModel.TransfertRackValidation.GisementRackArrivant"
														SelectedItemChanged=@(args => ViewModel.OnSelectedRackArrivant(args)) />
									</div>
								</div>

								<div class="col-xl-3">
									@if (ViewModel.TransfertRackValidation.IdRackPartant != 0)
									{
										<div>
											Palette sélectionnée :
										</div>
										<div>
											<div>
												<span><u>Client</u> : @ViewModel.ClientTransfert.NomClient</span>
											</div>
											<div>
												<span><u>Commande</u> : @ViewModel.ClientTransfert.IdCommande</span>
											</div>
											<div>
												<span><u>Info</u> : @ViewModel.ClientTransfert.DescriptionCmd</span>
											</div>
										</div>
									}
								</div>
							</div>

							<span class="margin-10px">
								<button type="submit" class="padding-5">Transférer</button>

								<button type="reset"
										class="padding-5"
										@onclick="ViewModel.CloseTransfert">
									Terminer
								</button>
							</span>
						</RadzenCard>
					</EditForm>
				</div>
			}
		</div>
	</div>

	<div>
		<RadzenGrid AllowFiltering="true"
					FilterCaseSensitivity="FilterCaseSensitivity.Default"
					AllowPaging="true"
					PageSize="30"
					AllowSorting="true"
					Data="@ViewModel.AllHangar"
					TItem="HangarView"
					EmptyText="Le hangar est vide"
					@ref="ViewModel.HangarGrid">
			<Columns>
				<RadzenGridColumn TItem="HangarView"
								  Property="NomClient"
								  Title="Client"
								  Width="150px" />

				<RadzenGridColumn TItem="HangarView"
								  Property="IdCommande"
								  Title="Num commande"
								  Width="150px" />

				<RadzenGridColumn TItem="HangarView"
								  Property="Gisement"
								  Title="Gisement"
								  Width="150px" />

				<RadzenGridColumn TItem="HangarView"
								  Property="PosRack"
								  Title="Position"
								  Sortable="false"
								  Filterable="false"
								  Width="80px" />

				<RadzenGridColumn TItem="HangarView"
								  Property="DateEntree"
								  Title="Date entrée"
								  Filterable="false"
								  Format="date-time"
								  Width="150px">
					<Template Context="hang">
						@String.Format("{0:d}", hang.DateEntree)
					</Template>
				</RadzenGridColumn>

				<RadzenGridColumn TItem="HangarView"
								  Property="DescriptionCmd"
								  Title="Description" />
			</Columns>
		</RadzenGrid>
	</div>
}
else
{
	<div>Chargement en cours ...</div>
}


@code {
	protected override void OnInitialized()
	{
		ViewModel.SetStateHasChanged(StateHasChanged);
		base.OnInitialized();
	}
}
